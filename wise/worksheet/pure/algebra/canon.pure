//using math;
// Based off of http://gist.github.com/315241

//add x::int y::int = x + y;

//////////////////////////////////////////////////////////////////////
// Term deconstructors
//////////////////////////////////////////////////////////////////////

sump (add x y) = 1 ; sump x = 0 ;
base (powr x y) = x;
base x = x;
exponent (powr x y) = y ;
exponent x = 1;

term (mul n x) = x if numberp n;
term ((mul (mul x y) z)) = mul (term (mul x y)) z;
term x = x ;

constant (mul n x) = n if numberp n ;
constant (mul (mul x y) z) = constant (mul x y) ;
constant x = 1 ;

//////////////////////////////////////////////////////////////////////
// Partial ordering on algebraic objects
//////////////////////////////////////////////////////////////////////

cmp x y = x < y if numberp x && numberp y ;
cmp x y = 1 if numberp x && ~(numberp y) ;
cmp (powr a b) (powr c d) = if a === c then cmp b d else cmp a c ;
cmp a (powr b c) = if a === b then cmp 1 c else cmp a b ;
cmp (powr a b) c = if a === b then cmp b 1 else cmp a c ;
cmp (x1@_ y1) (x2@_ y2) = if x1===x2 then cmp y1 y2 else cmp x1 x2;
cmp (x1@_ y1) x2 = if x1===x2 then 0 else cmp x1 x2;
cmp x1 (x2@_ y2) = if x1===x2 then 1 else cmp x1 x2;

//Alphabetize variables
cmp x y = str x < str y if atomp x && atomp y ;
cmp x y = ~(cmp y x) otherwise ;

//////////////////////////////////////////////////////////////////////
// Powers
//////////////////////////////////////////////////////////////////////

powr x 0 = 1;
powr x 1 = x;
powr 0 x = 0;
powr 1 x = 1;

powr (powr r s) w = powr r (mul s w) if numberp w ;
powr (mul x y) w = mul (powr x w) (powr y w) if numberp w ;

//////////////////////////////////////////////////////////////////////
// *
//////////////////////////////////////////////////////////////////////

//add x::int y::int = x + y;

mul 0 x = 0 ;
mul x y = powr (base x) (add (exponent x) (exponent y)) if (base x) === (base y) ;
mul (mul a x) y = mul a ( powr (base x) (add (exponent x) (exponent y)) ) if (base x) === (base y) ;
mul x y = mul y x if cmp y x ;
mul (mul x y) z = mul (mul x z) y if cmp z y ;
mul x (mul y z) = mul (mul x y) z ;

//////////////////////////////////////////////////////////////////////
// +
//////////////////////////////////////////////////////////////////////

//add 0 x = x ;
//add a b = (mul (add (constant a) (constant b)) (term a)) if (term a) === (term b) ;
//add (add a b)  c = add a (mul (add (constant b) (constant c)) (term b)) if (term b) === (term c) ;
//add a b = add b a if (cmp b a) && ~(sump a) ;
//add (add a b)  c = add (add a c) b if cmp c b ;
//add a (add b c) = add (add a b) c;

//////////////////////////////////////////////////////////////////////

//add x (Neg y) = add x (mul (Neg 1) y) ;
//div x y = mul x (powr y (neg 1)) ;
